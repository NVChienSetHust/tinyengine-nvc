fn (%input: Tensor[(1, 3, 128, 128), int8], %v0_weight: Tensor[(16, 3, 3, 3), int8], %v0_bias: Tensor[(16), int32], %v0_zero_x: Tensor[(1), int8], %v0_zero_y: Tensor[(1), int8], %v0_scale: Tensor[(16), float32], %v1_conv_0_weight: Tensor[(16, 1, 3, 3), int8], %v1_conv_0_bias: Tensor[(16), int32], %v1_conv_0_zero_x: Tensor[(1), int8], %v1_conv_0_zero_y: Tensor[(1), int8], %v1_conv_0_scale: Tensor[(16), float32], %v1_conv_1_weight: Tensor[(8, 16, 1, 1), int8], %v1_conv_1_bias: Tensor[(8), int32], %v1_conv_1_zero_x: Tensor[(1), int8], %v1_conv_1_zero_y: Tensor[(1), int8], %v1_conv_1_scale: Tensor[(8), float32], %v2_conv_0_weight: Tensor[(32, 8, 1, 1), int8], %v2_conv_0_bias: Tensor[(32), int32], %v2_conv_0_zero_x: Tensor[(1), int8], %v2_conv_0_zero_y: Tensor[(1), int8], %v2_conv_0_scale: Tensor[(32), float32], %v2_conv_1_weight: Tensor[(32, 1, 3, 3), int8], %v2_conv_1_bias: Tensor[(32), int32], %v2_conv_1_zero_x: Tensor[(1), int8], %v2_conv_1_zero_y: Tensor[(1), int8], %v2_conv_1_scale: Tensor[(32), float32], %v2_conv_2_weight: Tensor[(16, 32, 1, 1), int8], %v2_conv_2_bias: Tensor[(16), int32], %v2_conv_2_zero_x: Tensor[(1), int8], %v2_conv_2_zero_y: Tensor[(1), int8], %v2_conv_2_scale: Tensor[(16), float32], %v3_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v3_conv_0_bias: Tensor[(48), int32], %v3_conv_0_zero_x: Tensor[(1), int8], %v3_conv_0_zero_y: Tensor[(1), int8], %v3_conv_0_scale: Tensor[(48), float32], %v3_conv_1_weight: Tensor[(48, 1, 3, 3), int8], %v3_conv_1_bias: Tensor[(48), int32], %v3_conv_1_zero_x: Tensor[(1), int8], %v3_conv_1_zero_y: Tensor[(1), int8], %v3_conv_1_scale: Tensor[(48), float32], %v3_conv_2_weight: Tensor[(16, 48, 1, 1), int8], %v3_conv_2_bias: Tensor[(16), int32], %v3_conv_2_zero_x: Tensor[(1), int8], %v3_conv_2_zero_y: Tensor[(1), int8], %v3_conv_2_scale: Tensor[(16), float32], %v3_qadd_zero_x1: Tensor[(1), int8], %v3_qadd_zero_x2: Tensor[(1), int8], %v3_qadd_scale_x1: Tensor[(1), float32], %v3_qadd_scale_x2: Tensor[(1), float32], %v3_qadd_zero_y: Tensor[(1), int8], %v3_qadd_scale_y: Tensor[(1), float32], %v4_conv_0_weight: Tensor[(48, 16, 1, 1), int8], %v4_conv_0_bias: Tensor[(48), int32], %v4_conv_0_zero_x: Tensor[(1), int8], %v4_conv_0_zero_y: Tensor[(1), int8], %v4_conv_0_scale: Tensor[(48), float32], %v4_conv_1_weight: Tensor[(48, 1, 7, 7), int8], %v4_conv_1_bias: Tensor[(48), int32], %v4_conv_1_zero_x: Tensor[(1), int8], %v4_conv_1_zero_y: Tensor[(1), int8], %v4_conv_1_scale: Tensor[(48), float32], %v4_conv_2_weight: Tensor[(24, 48, 1, 1), int8], %v4_conv_2_bias: Tensor[(24), int32], %v4_conv_2_zero_x: Tensor[(1), int8], %v4_conv_2_zero_y: Tensor[(1), int8], %v4_conv_2_scale: Tensor[(24), float32], %v5_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v5_conv_0_bias: Tensor[(120), int32], %v5_conv_0_zero_x: Tensor[(1), int8], %v5_conv_0_zero_y: Tensor[(1), int8], %v5_conv_0_scale: Tensor[(120), float32], %v5_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v5_conv_1_bias: Tensor[(120), int32], %v5_conv_1_zero_x: Tensor[(1), int8], %v5_conv_1_zero_y: Tensor[(1), int8], %v5_conv_1_scale: Tensor[(120), float32], %v5_conv_2_weight: Tensor[(24, 120, 1, 1), int8], %v5_conv_2_bias: Tensor[(24), int32], %v5_conv_2_zero_x: Tensor[(1), int8], %v5_conv_2_zero_y: Tensor[(1), int8], %v5_conv_2_scale: Tensor[(24), float32], %v5_qadd_zero_x1: Tensor[(1), int8], %v5_qadd_zero_x2: Tensor[(1), int8], %v5_qadd_scale_x1: Tensor[(1), float32], %v5_qadd_scale_x2: Tensor[(1), float32], %v5_qadd_zero_y: Tensor[(1), int8], %v5_qadd_scale_y: Tensor[(1), float32], %v6_conv_0_weight: Tensor[(120, 24, 1, 1), int8], %v6_conv_0_bias: Tensor[(120), int32], %v6_conv_0_zero_x: Tensor[(1), int8], %v6_conv_0_zero_y: Tensor[(1), int8], %v6_conv_0_scale: Tensor[(120), float32], %v6_conv_1_weight: Tensor[(120, 1, 3, 3), int8], %v6_conv_1_bias: Tensor[(120), int32], %v6_conv_1_zero_x: Tensor[(1), int8], %v6_conv_1_zero_y: Tensor[(1), int8], %v6_conv_1_scale: Tensor[(120), float32], %v6_conv_2_weight: Tensor[(40, 120, 1, 1), int8], %v6_conv_2_bias: Tensor[(40), int32], %v6_conv_2_zero_x: Tensor[(1), int8], %v6_conv_2_zero_y: Tensor[(1), int8], %v6_conv_2_scale: Tensor[(40), float32], %v7_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v7_conv_0_bias: Tensor[(160), int32], %v7_conv_0_zero_x: Tensor[(1), int8], %v7_conv_0_zero_y: Tensor[(1), int8], %v7_conv_0_scale: Tensor[(160), float32], %v7_conv_1_weight: Tensor[(160, 1, 7, 7), int8], %v7_conv_1_bias: Tensor[(160), int32], %v7_conv_1_zero_x: Tensor[(1), int8], %v7_conv_1_zero_y: Tensor[(1), int8], %v7_conv_1_scale: Tensor[(160), float32], %v7_conv_2_weight: Tensor[(40, 160, 1, 1), int8], %v7_conv_2_bias: Tensor[(40), int32], %v7_conv_2_zero_x: Tensor[(1), int8], %v7_conv_2_zero_y: Tensor[(1), int8], %v7_conv_2_scale: Tensor[(40), float32], %v7_qadd_zero_x1: Tensor[(1), int8], %v7_qadd_zero_x2: Tensor[(1), int8], %v7_qadd_scale_x1: Tensor[(1), float32], %v7_qadd_scale_x2: Tensor[(1), float32], %v7_qadd_zero_y: Tensor[(1), int8], %v7_qadd_scale_y: Tensor[(1), float32], %v8_conv_0_weight: Tensor[(160, 40, 1, 1), int8], %v8_conv_0_bias: Tensor[(160), int32], %v8_conv_0_zero_x: Tensor[(1), int8], %v8_conv_0_zero_y: Tensor[(1), int8], %v8_conv_0_scale: Tensor[(160), float32], %v8_conv_1_weight: Tensor[(160, 1, 5, 5), int8], %v8_conv_1_bias: Tensor[(160), int32], %v8_conv_1_zero_x: Tensor[(1), int8], %v8_conv_1_zero_y: Tensor[(1), int8], %v8_conv_1_scale: Tensor[(160), float32], %v8_conv_2_weight: Tensor[(48, 160, 1, 1), int8], %v8_conv_2_bias: Tensor[(48), int32], %v8_conv_2_zero_x: Tensor[(1), int8], %v8_conv_2_zero_y: Tensor[(1), int8], %v8_conv_2_scale: Tensor[(48), float32], %v9_conv_0_weight: Tensor[(144, 48, 1, 1), int8], %v9_conv_0_bias: Tensor[(144), int32], %v9_conv_0_zero_x: Tensor[(1), int8], %v9_conv_0_zero_y: Tensor[(1), int8], %v9_conv_0_scale: Tensor[(144), float32], %v9_conv_1_weight: Tensor[(144, 1, 3, 3), int8], %v9_conv_1_bias: Tensor[(144), int32], %v9_conv_1_zero_x: Tensor[(1), int8], %v9_conv_1_zero_y: Tensor[(1), int8], %v9_conv_1_scale: Tensor[(144), float32], %v9_conv_2_weight: Tensor[(48, 144, 1, 1), int8], %v9_conv_2_bias: Tensor[(48), int32], %v9_conv_2_zero_x: Tensor[(1), int8], %v9_conv_2_zero_y: Tensor[(1), int8], %v9_conv_2_scale: Tensor[(48), float32], %v9_qadd_zero_x1: Tensor[(1), int8], %v9_qadd_zero_x2: Tensor[(1), int8], %v9_qadd_scale_x1: Tensor[(1), float32], %v9_qadd_scale_x2: Tensor[(1), float32], %v9_qadd_zero_y: Tensor[(1), int8], %v9_qadd_scale_y: Tensor[(1), float32], %v10_conv_0_weight: Tensor[(192, 48, 1, 1), int8], %v10_conv_0_bias: Tensor[(192), int32], %v10_conv_0_zero_x: Tensor[(1), int8], %v10_conv_0_zero_y: Tensor[(1), int8], %v10_conv_0_scale: Tensor[(192), float32], %v10_conv_1_weight: Tensor[(192, 1, 3, 3), int8], %v10_conv_1_bias: Tensor[(192), int32], %v10_conv_1_zero_x: Tensor[(1), int8], %v10_conv_1_zero_y: Tensor[(1), int8], %v10_conv_1_scale: Tensor[(192), float32], %v10_conv_2_weight: Tensor[(48, 192, 1, 1), int8], %v10_conv_2_bias: Tensor[(48), int32], %v10_conv_2_zero_x: Tensor[(1), int8], %v10_conv_2_zero_y: Tensor[(1), int8], %v10_conv_2_scale: Tensor[(48), float32], %v10_qadd_zero_x1: Tensor[(1), int8], %v10_qadd_zero_x2: Tensor[(1), int8], %v10_qadd_scale_x1: Tensor[(1), float32], %v10_qadd_scale_x2: Tensor[(1), float32], %v10_qadd_zero_y: Tensor[(1), int8], %v10_qadd_scale_y: Tensor[(1), float32], %v11_conv_0_weight: Tensor[(240, 48, 1, 1), int8], %v11_conv_0_bias: Tensor[(240), int32], %v11_conv_0_zero_x: Tensor[(1), int8], %v11_conv_0_zero_y: Tensor[(1), int8], %v11_conv_0_scale: Tensor[(240), float32], %v11_conv_1_weight: Tensor[(240, 1, 7, 7), int8], %v11_conv_1_bias: Tensor[(240), int32], %v11_conv_1_zero_x: Tensor[(1), int8], %v11_conv_1_zero_y: Tensor[(1), int8], %v11_conv_1_scale: Tensor[(240), float32], %v11_conv_2_weight: Tensor[(96, 240, 1, 1), int8], %v11_conv_2_bias: Tensor[(96), int32], %v11_conv_2_zero_x: Tensor[(1), int8], %v11_conv_2_zero_y: Tensor[(1), int8], %v11_conv_2_scale: Tensor[(96), float32], %v12_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v12_conv_0_bias: Tensor[(384), int32], %v12_conv_0_zero_x: Tensor[(1), int8], %v12_conv_0_zero_y: Tensor[(1), int8], %v12_conv_0_scale: Tensor[(384), float32], %v12_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v12_conv_1_bias: Tensor[(384), int32], %v12_conv_1_zero_x: Tensor[(1), int8], %v12_conv_1_zero_y: Tensor[(1), int8], %v12_conv_1_scale: Tensor[(384), float32], %v12_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v12_conv_2_bias: Tensor[(96), int32], %v12_conv_2_zero_x: Tensor[(1), int8], %v12_conv_2_zero_y: Tensor[(1), int8], %v12_conv_2_scale: Tensor[(96), float32], %v12_qadd_zero_x1: Tensor[(1), int8], %v12_qadd_zero_x2: Tensor[(1), int8], %v12_qadd_scale_x1: Tensor[(1), float32], %v12_qadd_scale_x2: Tensor[(1), float32], %v12_qadd_zero_y: Tensor[(1), int8], %v12_qadd_scale_y: Tensor[(1), float32], %v13_conv_0_weight: Tensor[(384, 96, 1, 1), int8], %v13_conv_0_bias: Tensor[(384), int32], %v13_conv_0_zero_x: Tensor[(1), int8], %v13_conv_0_zero_y: Tensor[(1), int8], %v13_conv_0_scale: Tensor[(384), float32], %v13_conv_1_weight: Tensor[(384, 1, 5, 5), int8], %v13_conv_1_bias: Tensor[(384), int32], %v13_conv_1_zero_x: Tensor[(1), int8], %v13_conv_1_zero_y: Tensor[(1), int8], %v13_conv_1_scale: Tensor[(384), float32], %v13_conv_2_weight: Tensor[(96, 384, 1, 1), int8], %v13_conv_2_bias: Tensor[(96), int32], %v13_conv_2_zero_x: Tensor[(1), int8], %v13_conv_2_zero_y: Tensor[(1), int8], %v13_conv_2_scale: Tensor[(96), float32], %v13_qadd_zero_x1: Tensor[(1), int8], %v13_qadd_zero_x2: Tensor[(1), int8], %v13_qadd_scale_x1: Tensor[(1), float32], %v13_qadd_scale_x2: Tensor[(1), float32], %v13_qadd_zero_y: Tensor[(1), int8], %v13_qadd_scale_y: Tensor[(1), float32], %v14_conv_0_weight: Tensor[(576, 96, 1, 1), int8], %v14_conv_0_bias: Tensor[(576), int32], %v14_conv_0_zero_x: Tensor[(1), int8], %v14_conv_0_zero_y: Tensor[(1), int8], %v14_conv_0_scale: Tensor[(576), float32], %v14_conv_1_weight: Tensor[(576, 1, 3, 3), int8], %v14_conv_1_bias: Tensor[(576), int32], %v14_conv_1_zero_x: Tensor[(1), int8], %v14_conv_1_zero_y: Tensor[(1), int8], %v14_conv_1_scale: Tensor[(576), float32], %v14_conv_2_weight: Tensor[(160, 576, 1, 1), int8], %v14_conv_2_bias: Tensor[(160), int32], %v14_conv_2_zero_x: Tensor[(1), int8], %v14_conv_2_zero_y: Tensor[(1), int8], %v14_conv_2_scale: Tensor[(160), float32], %v15_weight: Tensor[(10, 160, 1, 1), int8], %v15_bias: Tensor[(10), int32], %v15_zero_x: Tensor[(1), int8], %v15_zero_y: Tensor[(1), int8], %v15_scale: Tensor[(10), float32], %label: Tensor[(1, 10), float32]) -> (float32, Tensor[(10), float32], Tensor[(10, 160, 1, 1), float32], Tensor[(160), float32], Tensor[(576), float32], Tensor[(576), float32], Tensor[(96), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(96), float32], Tensor[(384), float32], Tensor[(384), float32], Tensor[(96), float32], Tensor[(240), float32], Tensor[(240), float32], Tensor[(240, 24, 1, 1), float32], Tensor[(48), float32], Tensor[(192), float32], Tensor[(192), float32], Tensor[(192, 24, 1, 1), float32], Tensor[(48), float32], Tensor[(144), float32], Tensor[(144), float32], Tensor[(144, 12, 1, 1), float32], Tensor[(48), float32], Tensor[(160), float32]) {
  %0 = nn.mcuconv2d(%input, %v0_weight, %v0_bias, %v0_zero_x, %v0_zero_y, %v0_scale, strides=[2, 2], padding=[1, 1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %1 = nn.mcutruncate(%0) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %2 = nn.mcuconv2d(%1, %v1_conv_0_weight, %v1_conv_0_bias, %v1_conv_0_zero_x, %v1_conv_0_zero_y, %v1_conv_0_scale, padding=[1, 1, 1, 1], groups=16) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int32] */;
  %3 = nn.mcutruncate(%2) /* from_string */ /* ty=Tensor[(1, 16, 64, 64), int8] */;
  %4 = nn.mcuconv2d(%3, %v1_conv_1_weight, %v1_conv_1_bias, %v1_conv_1_zero_x, %v1_conv_1_zero_y, %v1_conv_1_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int32] */;
  %5 = nn.mcutruncate(%4) /* from_string */ /* ty=Tensor[(1, 8, 64, 64), int8] */;
  %6 = nn.mcuconv2d(%5, %v2_conv_0_weight, %v2_conv_0_bias, %v2_conv_0_zero_x, %v2_conv_0_zero_y, %v2_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 32, 64, 64), int32] */;
  %7 = nn.mcutruncate(%6) /* from_string */ /* ty=Tensor[(1, 32, 64, 64), int8] */;
  %8 = nn.mcuconv2d(%7, %v2_conv_1_weight, %v2_conv_1_bias, %v2_conv_1_zero_x, %v2_conv_1_zero_y, %v2_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=32) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), int32] */;
  %9 = nn.mcutruncate(%8) /* from_string */ /* ty=Tensor[(1, 32, 32, 32), int8] */;
  %10 = nn.mcuconv2d(%9, %v2_conv_2_weight, %v2_conv_2_bias, %v2_conv_2_zero_x, %v2_conv_2_zero_y, %v2_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %11 = nn.mcutruncate(%10) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %12 = nn.mcuconv2d(%11, %v3_conv_0_weight, %v3_conv_0_bias, %v3_conv_0_zero_x, %v3_conv_0_zero_y, %v3_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %13 = nn.mcutruncate(%12) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %14 = nn.mcuconv2d(%13, %v3_conv_1_weight, %v3_conv_1_bias, %v3_conv_1_zero_x, %v3_conv_1_zero_y, %v3_conv_1_scale, padding=[1, 1, 1, 1], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %15 = nn.mcutruncate(%14) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %16 = nn.mcuconv2d(%15, %v3_conv_2_weight, %v3_conv_2_bias, %v3_conv_2_zero_x, %v3_conv_2_zero_y, %v3_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int32] */;
  %17 = nn.mcutruncate(%16) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %18 = nn.mcuadd(%11, %17, %v3_qadd_zero_x1, %v3_qadd_zero_x2, %v3_qadd_scale_x1, %v3_qadd_scale_x2, %v3_qadd_zero_y, %v3_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %19 = nn.mcutruncate(%18) /* from_string */ /* ty=Tensor[(1, 16, 32, 32), int8] */;
  %20 = nn.mcuconv2d(%19, %v4_conv_0_weight, %v4_conv_0_bias, %v4_conv_0_zero_x, %v4_conv_0_zero_y, %v4_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int32] */;
  %21 = nn.mcutruncate(%20) /* from_string */ /* ty=Tensor[(1, 48, 32, 32), int8] */;
  %22 = nn.mcuconv2d(%21, %v4_conv_1_weight, %v4_conv_1_bias, %v4_conv_1_zero_x, %v4_conv_1_zero_y, %v4_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=48) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int32] */;
  %23 = nn.mcutruncate(%22) /* from_string */ /* ty=Tensor[(1, 48, 16, 16), int8] */;
  %24 = nn.mcuconv2d(%23, %v4_conv_2_weight, %v4_conv_2_bias, %v4_conv_2_zero_x, %v4_conv_2_zero_y, %v4_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %25 = nn.mcutruncate(%24) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %26 = nn.mcuconv2d(%25, %v5_conv_0_weight, %v5_conv_0_bias, %v5_conv_0_zero_x, %v5_conv_0_zero_y, %v5_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %27 = nn.mcutruncate(%26) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %28 = nn.mcuconv2d(%27, %v5_conv_1_weight, %v5_conv_1_bias, %v5_conv_1_zero_x, %v5_conv_1_zero_y, %v5_conv_1_scale, padding=[1, 1, 1, 1], groups=120) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %29 = nn.mcutruncate(%28) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %30 = nn.mcuconv2d(%29, %v5_conv_2_weight, %v5_conv_2_bias, %v5_conv_2_zero_x, %v5_conv_2_zero_y, %v5_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int32] */;
  %31 = nn.mcutruncate(%30) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %32 = nn.mcuadd(%25, %31, %v5_qadd_zero_x1, %v5_qadd_zero_x2, %v5_qadd_scale_x1, %v5_qadd_scale_x2, %v5_qadd_zero_y, %v5_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %33 = nn.mcutruncate(%32) /* from_string */ /* ty=Tensor[(1, 24, 16, 16), int8] */;
  %34 = nn.mcuconv2d(%33, %v6_conv_0_weight, %v6_conv_0_bias, %v6_conv_0_zero_x, %v6_conv_0_zero_y, %v6_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int32] */;
  %35 = nn.mcutruncate(%34) /* from_string */ /* ty=Tensor[(1, 120, 16, 16), int8] */;
  %36 = nn.mcuconv2d(%35, %v6_conv_1_weight, %v6_conv_1_bias, %v6_conv_1_zero_x, %v6_conv_1_zero_y, %v6_conv_1_scale, strides=[2, 2], padding=[1, 1, 1, 1], groups=120) /* from_string */ /* ty=Tensor[(1, 120, 8, 8), int32] */;
  %37 = nn.mcutruncate(%36) /* from_string */ /* ty=Tensor[(1, 120, 8, 8), int8] */;
  %38 = nn.mcuconv2d(%37, %v6_conv_2_weight, %v6_conv_2_bias, %v6_conv_2_zero_x, %v6_conv_2_zero_y, %v6_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %39 = nn.mcutruncate(%38) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %40 = nn.mcuconv2d(%39, %v7_conv_0_weight, %v7_conv_0_bias, %v7_conv_0_zero_x, %v7_conv_0_zero_y, %v7_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %41 = nn.mcutruncate(%40) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %42 = nn.mcuconv2d(%41, %v7_conv_1_weight, %v7_conv_1_bias, %v7_conv_1_zero_x, %v7_conv_1_zero_y, %v7_conv_1_scale, padding=[3, 3, 3, 3], groups=160) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %43 = nn.mcutruncate(%42) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %44 = nn.mcuconv2d(%43, %v7_conv_2_weight, %v7_conv_2_bias, %v7_conv_2_zero_x, %v7_conv_2_zero_y, %v7_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int32] */;
  %45 = nn.mcutruncate(%44) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %46 = nn.mcuadd(%39, %45, %v7_qadd_zero_x1, %v7_qadd_zero_x2, %v7_qadd_scale_x1, %v7_qadd_scale_x2, %v7_qadd_zero_y, %v7_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %47 = nn.mcutruncate(%46) /* from_string */ /* ty=Tensor[(1, 40, 8, 8), int8] */;
  %48 = nn.mcuconv2d(%47, %v8_conv_0_weight, %v8_conv_0_bias, %v8_conv_0_zero_x, %v8_conv_0_zero_y, %v8_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %49 = nn.mcutruncate(%48) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %50 = nn.mcuconv2d(%49, %v8_conv_1_weight, %v8_conv_1_bias, %v8_conv_1_zero_x, %v8_conv_1_zero_y, %v8_conv_1_scale, padding=[2, 2, 2, 2], groups=160) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int32] */;
  %51 = nn.mcutruncate(%50) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), int8] */;
  %52 = nn.mcuconv2d(%51, %v8_conv_2_weight, %v8_conv_2_bias, %v8_conv_2_zero_x, %v8_conv_2_zero_y, %v8_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %53 = nn.mcutruncate(%52) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %54 = nn.mcuconv2d(%53, %v9_conv_0_weight, %v9_conv_0_bias, %v9_conv_0_zero_x, %v9_conv_0_zero_y, %v9_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %55 = nn.mcutruncate(%54) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %56 = nn.mcuconv2d(%55, %v9_conv_1_weight, %v9_conv_1_bias, %v9_conv_1_zero_x, %v9_conv_1_zero_y, %v9_conv_1_scale, padding=[1, 1, 1, 1], groups=144) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int32] */;
  %57 = nn.mcutruncate(%56) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), int8] */;
  %58 = nn.mcuconv2d(%57, %v9_conv_2_weight, %v9_conv_2_bias, %v9_conv_2_zero_x, %v9_conv_2_zero_y, %v9_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %59 = nn.mcutruncate(%58) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %60 = nn.mcuadd(%53, %59, %v9_qadd_zero_x1, %v9_qadd_zero_x2, %v9_qadd_scale_x1, %v9_qadd_scale_x2, %v9_qadd_zero_y, %v9_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %61 = nn.mcutruncate(%60) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %62 = nn.mcuconv2d(%61, %v10_conv_0_weight, %v10_conv_0_bias, %v10_conv_0_zero_x, %v10_conv_0_zero_y, %v10_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %63 = nn.mcutruncate(%62) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %64 = nn.mcuconv2d(%63, %v10_conv_1_weight, %v10_conv_1_bias, %v10_conv_1_zero_x, %v10_conv_1_zero_y, %v10_conv_1_scale, padding=[1, 1, 1, 1], groups=192) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int32] */;
  %65 = nn.mcutruncate(%64) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), int8] */;
  %66 = nn.mcuconv2d(%65, %v10_conv_2_weight, %v10_conv_2_bias, %v10_conv_2_zero_x, %v10_conv_2_zero_y, %v10_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int32] */;
  %67 = nn.mcutruncate(%66) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %68 = nn.mcuadd(%61, %67, %v10_qadd_zero_x1, %v10_qadd_zero_x2, %v10_qadd_scale_x1, %v10_qadd_scale_x2, %v10_qadd_zero_y, %v10_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %69 = nn.mcutruncate(%68) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), int8] */;
  %70 = nn.mcuconv2d(%69, %v11_conv_0_weight, %v11_conv_0_bias, %v11_conv_0_zero_x, %v11_conv_0_zero_y, %v11_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int32] */;
  %71 = nn.mcutruncate(%70) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), int8] */;
  %72 = nn.mcuconv2d(%71, %v11_conv_1_weight, %v11_conv_1_bias, %v11_conv_1_zero_x, %v11_conv_1_zero_y, %v11_conv_1_scale, strides=[2, 2], padding=[3, 3, 3, 3], groups=240) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int32] */;
  %73 = nn.mcutruncate(%72) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), int8] */;
  %74 = nn.mcuconv2d(%73, %v11_conv_2_weight, %v11_conv_2_bias, %v11_conv_2_zero_x, %v11_conv_2_zero_y, %v11_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %75 = nn.mcutruncate(%74) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %76 = nn.mcuconv2d(%75, %v12_conv_0_weight, %v12_conv_0_bias, %v12_conv_0_zero_x, %v12_conv_0_zero_y, %v12_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %77 = nn.mcutruncate(%76) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %78 = nn.mcuconv2d(%77, %v12_conv_1_weight, %v12_conv_1_bias, %v12_conv_1_zero_x, %v12_conv_1_zero_y, %v12_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %79 = nn.mcutruncate(%78) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %80 = nn.mcuconv2d(%79, %v12_conv_2_weight, %v12_conv_2_bias, %v12_conv_2_zero_x, %v12_conv_2_zero_y, %v12_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %81 = nn.mcutruncate(%80) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %82 = nn.mcuadd(%75, %81, %v12_qadd_zero_x1, %v12_qadd_zero_x2, %v12_qadd_scale_x1, %v12_qadd_scale_x2, %v12_qadd_zero_y, %v12_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %83 = nn.mcutruncate(%82) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %84 = nn.mcuconv2d(%83, %v13_conv_0_weight, %v13_conv_0_bias, %v13_conv_0_zero_x, %v13_conv_0_zero_y, %v13_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %85 = nn.mcutruncate(%84) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %86 = nn.mcuconv2d(%85, %v13_conv_1_weight, %v13_conv_1_bias, %v13_conv_1_zero_x, %v13_conv_1_zero_y, %v13_conv_1_scale, padding=[2, 2, 2, 2], groups=384) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int32] */;
  %87 = nn.mcutruncate(%86) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), int8] */;
  %88 = nn.mcuconv2d(%87, %v13_conv_2_weight, %v13_conv_2_bias, %v13_conv_2_zero_x, %v13_conv_2_zero_y, %v13_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int32] */;
  %89 = nn.mcutruncate(%88) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %90 = nn.mcuadd(%83, %89, %v13_qadd_zero_x1, %v13_qadd_zero_x2, %v13_qadd_scale_x1, %v13_qadd_scale_x2, %v13_qadd_zero_y, %v13_qadd_scale_y, axis=0) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %91 = nn.mcutruncate(%90) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), int8] */;
  %92 = nn.mcuconv2d(%91, %v14_conv_0_weight, %v14_conv_0_bias, %v14_conv_0_zero_x, %v14_conv_0_zero_y, %v14_conv_0_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %93 = nn.mcutruncate(%92) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %94 = nn.mcuconv2d(%93, %v14_conv_1_weight, %v14_conv_1_bias, %v14_conv_1_zero_x, %v14_conv_1_zero_y, %v14_conv_1_scale, padding=[1, 1, 1, 1], groups=576) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int32] */;
  %95 = nn.mcutruncate(%94) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), int8] */;
  %96 = nn.mcuconv2d(%95, %v14_conv_2_weight, %v14_conv_2_bias, %v14_conv_2_zero_x, %v14_conv_2_zero_y, %v14_conv_2_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), int32] */;
  %97 = nn.mcutruncate(%96) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), int8] */;
  %98 = mcumean(%97, axis=[2, 3], keepdims=True) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), int8] */;
  %99 = nn.mcuconv2d(%98, %v15_weight, %v15_bias, %v15_zero_x, %v15_zero_y, %v15_scale, padding=[0, 0, 0, 0]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int32] */;
  %100 = nn.mcutruncate(%99) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), int8] */;
  %101 = reshape(%100, newshape=[0, 0]) /* from_string */ /* ty=Tensor[(1, 10), int8] */;
  %102 = cast(%101, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %103 = nn.log_softmax(%102) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %104 = cast(%99, dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %105 = greater_equal(%104, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %106 = less_equal(%104, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %107 = ones(shape=[], dtype="float32") /* from_string */ /* ty=float32 */;
  %108 = negative(%107) /* from_string */ /* ty=float32 */;
  %109 = multiply(%108, %label) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %110 = sum(%109, axis=[-1], keepdims=True) /* from_string */ /* ty=Tensor[(1, 1), float32] */;
  %111 = exp(%103) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %112 = multiply(%110, %111) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %113 = subtract(%109, %112) /* from_string */ /* ty=Tensor[(1, 10), float32] */;
  %114 = multiply(%105, %106) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), bool] */;
  %115 = reshape(%113, newshape=[1, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %116 = zeros(shape=[1, 10, 1, 1], dtype="float32") /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %117 = where(%114, %115, %116) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %118 = reshape(%v15_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %119 = multiply(%117, %118) /* from_string */ /* ty=Tensor[(1, 10, 1, 1), float32] */;
  %120 = cast(%98, dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %121 = tile(%119, reps=[1, 160, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %122 = reshape(%120, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %123 = reshape(%121, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(1600, 1, 1, 1), float32] */;
  %124 = nn.conv2d(%122, %123, padding=[0, 0, 0, 0], groups=160) /* from_string */ /* ty=Tensor[(1, 1600, 1, 1), float32] */;
  %125 = reshape(%124, newshape=[1, 160, 10, 1, 1]) /* from_string */ /* ty=Tensor[(1, 160, 10, 1, 1), float32] */;
  %126 = sum(%125, axis=[0]) /* from_string */ /* ty=Tensor[(160, 10, 1, 1), float32] */;
  %127 = cast(%96, dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %128 = greater_equal(%127, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %129 = less_equal(%127, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %130 = cast(%v15_weight, dtype="float32") /* from_string */ /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %131 = nn.conv2d_transpose(%119, %130, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %132 = multiply(%131, 0.0625f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %133 = ones(shape=[1, 160, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %134 = multiply(%128, %129) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), bool] */;
  %135 = multiply(%132, %133) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %136 = zeros(shape=[1, 160, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %137 = where(%134, %135, %136) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %138 = reshape(%v14_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %139 = multiply(%137, %138) /* from_string */ /* ty=Tensor[(1, 160, 4, 4), float32] */;
  %140 = cast(%94, dtype="float32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %141 = greater_equal(%140, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %142 = less_equal(%140, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %143 = cast(%v14_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(160, 576, 1, 1), float32] */;
  %144 = multiply(%141, %142) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %145 = nn.conv2d_transpose(%139, %143, channels=576, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %146 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %147 = where(%144, %145, %146) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %148 = reshape(%v14_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 576, 1, 1), float32] */;
  %149 = multiply(%147, %148) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %150 = cast(%92, dtype="float32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %151 = greater_equal(%150, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %152 = less_equal(%150, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %153 = cast(%v14_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(576, 1, 3, 3), float32] */;
  %154 = multiply(%151, %152) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), bool] */;
  %155 = nn.conv2d_transpose(%149, %153, channels=576, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=576, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %156 = zeros(shape=[1, 576, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %157 = where(%154, %155, %156) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %158 = reshape(%v14_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 576, 1, 1), float32] */;
  %159 = multiply(%157, %158) /* from_string */ /* ty=Tensor[(1, 576, 4, 4), float32] */;
  %160 = cast(%88, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %161 = greater_equal(%160, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %162 = less_equal(%160, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %163 = cast(%90, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %164 = greater_equal(%163, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %165 = less_equal(%163, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %166 = cast(%v14_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(576, 96, 1, 1), float32] */;
  %167 = multiply(%164, %165) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %168 = nn.conv2d_transpose(%159, %166, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %169 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %170 = where(%167, %168, %169) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %171 = reshape(%v13_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %172 = divide(%170, %171) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %173 = reshape(%v13_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %174 = multiply(%161, %162) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %175 = multiply(%172, %173) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %176 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %177 = where(%174, %175, %176) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %178 = reshape(%v13_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %179 = multiply(%177, %178) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %180 = cast(%86, dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %181 = greater_equal(%180, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %182 = less_equal(%180, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %183 = cast(%v13_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %184 = multiply(%181, %182) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %185 = nn.conv2d_transpose(%179, %183, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %186 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %187 = where(%184, %185, %186) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %188 = reshape(%v13_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %189 = multiply(%187, %188) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %190 = cast(%84, dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %191 = greater_equal(%190, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %192 = less_equal(%190, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %193 = cast(%v13_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(384, 1, 5, 5), float32] */;
  %194 = multiply(%191, %192) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %195 = nn.conv2d_transpose(%189, %193, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %196 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %197 = where(%194, %195, %196) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %198 = reshape(%v13_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %199 = multiply(%197, %198) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %200 = cast(%80, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %201 = greater_equal(%200, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %202 = less_equal(%200, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %203 = cast(%82, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %204 = greater_equal(%203, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %205 = less_equal(%203, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %206 = cast(%v13_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %207 = multiply(%204, %205) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %208 = nn.conv2d_transpose(%199, %206, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %209 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %210 = where(%207, %208, %209) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %211 = reshape(%v12_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %212 = divide(%210, %211) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %213 = reshape(%v12_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %214 = multiply(%201, %202) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %215 = multiply(%212, %213) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %216 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %217 = where(%214, %215, %216) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %218 = reshape(%v12_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %219 = multiply(%217, %218) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %220 = cast(%78, dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %221 = greater_equal(%220, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %222 = less_equal(%220, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %223 = cast(%v12_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(96, 384, 1, 1), float32] */;
  %224 = multiply(%221, %222) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %225 = nn.conv2d_transpose(%219, %223, channels=384, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %226 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %227 = where(%224, %225, %226) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %228 = reshape(%v12_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %229 = multiply(%227, %228) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %230 = cast(%76, dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %231 = greater_equal(%230, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %232 = less_equal(%230, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %233 = cast(%v12_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(384, 1, 5, 5), float32] */;
  %234 = multiply(%231, %232) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), bool] */;
  %235 = nn.conv2d_transpose(%229, %233, channels=384, kernel_size=[5, 5], padding=[2, 2, 2, 2], groups=384, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %236 = zeros(shape=[1, 384, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %237 = where(%234, %235, %236) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %238 = reshape(%v12_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 384, 1, 1), float32] */;
  %239 = multiply(%237, %238) /* from_string */ /* ty=Tensor[(1, 384, 4, 4), float32] */;
  %240 = cast(%74, dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %241 = greater_equal(%240, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %242 = less_equal(%240, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %243 = cast(%v12_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(384, 96, 1, 1), float32] */;
  %244 = multiply(%241, %242) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), bool] */;
  %245 = nn.conv2d_transpose(%239, %243, channels=96, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %246 = zeros(shape=[1, 96, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %247 = where(%244, %245, %246) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %248 = reshape(%v11_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 96, 1, 1), float32] */;
  %249 = multiply(%247, %248) /* from_string */ /* ty=Tensor[(1, 96, 4, 4), float32] */;
  %250 = cast(%72, dtype="float32") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %251 = greater_equal(%250, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %252 = less_equal(%250, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %253 = cast(%v11_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(96, 240, 1, 1), float32] */;
  %254 = multiply(%251, %252) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), bool] */;
  %255 = nn.conv2d_transpose(%249, %253, channels=240, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %256 = zeros(shape=[1, 240, 4, 4], dtype="float32") /* from_string */ /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %257 = where(%254, %255, %256) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %258 = reshape(%v11_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 240, 1, 1), float32] */;
  %259 = multiply(%257, %258) /* from_string */ /* ty=Tensor[(1, 240, 4, 4), float32] */;
  %260 = cast(%70, dtype="float32") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %261 = greater_equal(%260, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %262 = less_equal(%260, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %263 = cast(%v11_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(240, 1, 7, 7), float32] */;
  %264 = multiply(%261, %262) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), bool] */;
  %265 = nn.conv2d_transpose(%259, %263, channels=240, kernel_size=[7, 7], strides=[2, 2], output_padding=[1, 1], padding=[3, 3, 3, 3], groups=240, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %266 = zeros(shape=[1, 240, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %267 = where(%264, %265, %266) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %268 = reshape(%v11_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 240, 1, 1), float32] */;
  %269 = multiply(%267, %268) /* from_string */ /* ty=Tensor[(1, 240, 8, 8), float32] */;
  %270 = cast(%69, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %271 = strided_slice(%270, begin=[0, 0, 0, 0], end=[1, 24, 8, 8], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %272 = tile(%269, reps=[1, 24, 1, 1]) /* from_string */ /* ty=Tensor[(1, 5760, 8, 8), float32] */;
  %273 = reshape(%271, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %274 = reshape(%272, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(5760, 1, 8, 8), float32] */;
  %275 = nn.conv2d(%273, %274, padding=[0, 0, 0, 0], groups=24) /* from_string */ /* ty=Tensor[(1, 5760, 1, 1), float32] */;
  %276 = reshape(%275, newshape=[1, 24, 240, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24, 240, 1, 1), float32] */;
  %277 = sum(%276, axis=[0]) /* from_string */ /* ty=Tensor[(24, 240, 1, 1), float32] */;
  %278 = cast(%66, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %279 = greater_equal(%278, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %280 = less_equal(%278, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %281 = cast(%68, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %282 = greater_equal(%281, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %283 = less_equal(%281, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %284 = cast(%v11_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(240, 48, 1, 1), float32] */;
  %285 = multiply(%282, %283) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %286 = nn.conv2d_transpose(%269, %284, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %287 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %288 = where(%285, %286, %287) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %289 = reshape(%v10_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %290 = divide(%288, %289) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %291 = reshape(%v10_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %292 = multiply(%279, %280) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %293 = multiply(%290, %291) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %294 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %295 = where(%292, %293, %294) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %296 = reshape(%v10_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %297 = multiply(%295, %296) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %298 = cast(%64, dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %299 = greater_equal(%298, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %300 = less_equal(%298, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %301 = cast(%v10_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(48, 192, 1, 1), float32] */;
  %302 = multiply(%299, %300) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %303 = nn.conv2d_transpose(%297, %301, channels=192, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %304 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %305 = where(%302, %303, %304) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %306 = reshape(%v10_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %307 = multiply(%305, %306) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %308 = cast(%62, dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %309 = greater_equal(%308, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %310 = less_equal(%308, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %311 = cast(%v10_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(192, 1, 3, 3), float32] */;
  %312 = multiply(%309, %310) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), bool] */;
  %313 = nn.conv2d_transpose(%307, %311, channels=192, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=192, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %314 = zeros(shape=[1, 192, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %315 = where(%312, %313, %314) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %316 = reshape(%v10_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 192, 1, 1), float32] */;
  %317 = multiply(%315, %316) /* from_string */ /* ty=Tensor[(1, 192, 8, 8), float32] */;
  %318 = cast(%61, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %319 = strided_slice(%318, begin=[0, 0, 0, 0], end=[1, 24, 8, 8], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %320 = tile(%317, reps=[1, 24, 1, 1]) /* from_string */ /* ty=Tensor[(1, 4608, 8, 8), float32] */;
  %321 = reshape(%319, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 24, 8, 8), float32] */;
  %322 = reshape(%320, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(4608, 1, 8, 8), float32] */;
  %323 = nn.conv2d(%321, %322, padding=[0, 0, 0, 0], groups=24) /* from_string */ /* ty=Tensor[(1, 4608, 1, 1), float32] */;
  %324 = reshape(%323, newshape=[1, 24, 192, 1, 1]) /* from_string */ /* ty=Tensor[(1, 24, 192, 1, 1), float32] */;
  %325 = sum(%324, axis=[0]) /* from_string */ /* ty=Tensor[(24, 192, 1, 1), float32] */;
  %326 = cast(%58, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %327 = greater_equal(%326, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %328 = less_equal(%326, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %329 = cast(%60, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %330 = greater_equal(%329, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %331 = less_equal(%329, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %332 = cast(%v10_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(192, 48, 1, 1), float32] */;
  %333 = multiply(%330, %331) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %334 = nn.conv2d_transpose(%317, %332, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %335 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %336 = where(%333, %334, %335) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %337 = reshape(%v9_qadd_scale_y, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %338 = divide(%336, %337) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %339 = reshape(%v9_qadd_scale_x2, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1, 1, 1), float32] */;
  %340 = multiply(%327, %328) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %341 = multiply(%338, %339) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %342 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %343 = where(%340, %341, %342) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %344 = reshape(%v9_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %345 = multiply(%343, %344) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %346 = cast(%56, dtype="float32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %347 = greater_equal(%346, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %348 = less_equal(%346, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %349 = cast(%v9_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(48, 144, 1, 1), float32] */;
  %350 = multiply(%347, %348) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %351 = nn.conv2d_transpose(%345, %349, channels=144, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %352 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %353 = where(%350, %351, %352) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %354 = reshape(%v9_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %355 = multiply(%353, %354) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %356 = cast(%54, dtype="float32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %357 = greater_equal(%356, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %358 = less_equal(%356, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %359 = cast(%v9_conv_1_weight, dtype="float32") /* from_string */ /* ty=Tensor[(144, 1, 3, 3), float32] */;
  %360 = multiply(%357, %358) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), bool] */;
  %361 = nn.conv2d_transpose(%355, %359, channels=144, kernel_size=[3, 3], padding=[1, 1, 1, 1], groups=144, kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %362 = zeros(shape=[1, 144, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %363 = where(%360, %361, %362) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %364 = reshape(%v9_conv_0_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 144, 1, 1), float32] */;
  %365 = multiply(%363, %364) /* from_string */ /* ty=Tensor[(1, 144, 8, 8), float32] */;
  %366 = cast(%53, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %367 = strided_slice(%366, begin=[0, 0, 0, 0], end=[1, 12, 8, 8], strides=[1], axes=None) /* from_string */ /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %368 = tile(%365, reps=[1, 12, 1, 1]) /* from_string */ /* ty=Tensor[(1, 1728, 8, 8), float32] */;
  %369 = reshape(%367, newshape=[1, -1, 0, 0]) /* from_string */ /* ty=Tensor[(1, 12, 8, 8), float32] */;
  %370 = reshape(%368, newshape=[-1, 1, 0, 0]) /* from_string */ /* ty=Tensor[(1728, 1, 8, 8), float32] */;
  %371 = nn.conv2d(%369, %370, padding=[0, 0, 0, 0], groups=12) /* from_string */ /* ty=Tensor[(1, 1728, 1, 1), float32] */;
  %372 = reshape(%371, newshape=[1, 12, 144, 1, 1]) /* from_string */ /* ty=Tensor[(1, 12, 144, 1, 1), float32] */;
  %373 = sum(%372, axis=[0]) /* from_string */ /* ty=Tensor[(12, 144, 1, 1), float32] */;
  %374 = cast(%52, dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %375 = greater_equal(%374, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %376 = less_equal(%374, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %377 = cast(%v9_conv_0_weight, dtype="float32") /* from_string */ /* ty=Tensor[(144, 48, 1, 1), float32] */;
  %378 = multiply(%375, %376) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), bool] */;
  %379 = nn.conv2d_transpose(%365, %377, channels=48, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %380 = zeros(shape=[1, 48, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %381 = where(%378, %379, %380) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %382 = reshape(%v8_conv_2_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 48, 1, 1), float32] */;
  %383 = multiply(%381, %382) /* from_string */ /* ty=Tensor[(1, 48, 8, 8), float32] */;
  %384 = cast(%50, dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %385 = greater_equal(%384, -128f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %386 = less_equal(%384, 127f /* ty=float32 */) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %387 = cast(%v8_conv_2_weight, dtype="float32") /* from_string */ /* ty=Tensor[(48, 160, 1, 1), float32] */;
  %388 = multiply(%385, %386) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), bool] */;
  %389 = nn.conv2d_transpose(%383, %387, channels=160, kernel_size=[1, 1], padding=[0, 0, 0, 0], kernel_layout="IOHW") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %390 = zeros(shape=[1, 160, 8, 8], dtype="float32") /* from_string */ /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %391 = where(%388, %389, %390) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %392 = reshape(%v8_conv_1_scale, newshape=[1, -1, 1, 1]) /* from_string */ /* ty=Tensor[(1, 160, 1, 1), float32] */;
  %393 = multiply(%391, %392) /* from_string */ /* ty=Tensor[(1, 160, 8, 8), float32] */;
  %394 = nn.cross_entropy_with_logits(%103, %label) /* from_string */ /* ty=float32 */;
  %395 = sum(%119, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(10), float32] */;
  %396 = transpose(%126, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(10, 160, 1, 1), float32] */;
  %397 = sum(%139, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(160), float32] */;
  %398 = sum(%149, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(576), float32] */;
  %399 = sum(%159, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(576), float32] */;
  %400 = sum(%179, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), float32] */;
  %401 = sum(%189, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), float32] */;
  %402 = sum(%199, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), float32] */;
  %403 = sum(%219, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), float32] */;
  %404 = sum(%229, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), float32] */;
  %405 = sum(%239, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(384), float32] */;
  %406 = sum(%249, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(96), float32] */;
  %407 = sum(%259, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(240), float32] */;
  %408 = sum(%269, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(240), float32] */;
  %409 = transpose(%277, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(240, 24, 1, 1), float32] */;
  %410 = sum(%297, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), float32] */;
  %411 = sum(%307, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), float32] */;
  %412 = sum(%317, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(192), float32] */;
  %413 = transpose(%325, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(192, 24, 1, 1), float32] */;
  %414 = sum(%345, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), float32] */;
  %415 = sum(%355, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), float32] */;
  %416 = sum(%365, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(144), float32] */;
  %417 = transpose(%373, axes=[1, 0, 2, 3]) /* from_string */ /* ty=Tensor[(144, 12, 1, 1), float32] */;
  %418 = sum(%383, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(48), float32] */;
  %419 = sum(%393, axis=[1], exclude=True) /* from_string */ /* ty=Tensor[(160), float32] */;
  (%394, %395, %396, %397, %398, %399, %400, %401, %402, %403, %404, %405, %406, %407, %408, %409, %410, %411, %412, %413, %414, %415, %416, %417, %418, %419)
}